{
  "sympy__sympy-16792__claude-3.7": {
    "model_patch": "diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex f0befb2bd7..c363758133 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -910,7 +910,7 @@ def get_prototype(self, routine):\n         type_args = []\n         for arg in routine.arguments:\n             name = self.printer.doprint(arg.name)\n-            if arg.dimensions or isinstance(arg, ResultBase):\n+            if arg.dimensions or isinstance(arg, ResultBase) or isinstance(arg.name, MatrixSymbol):\n                 type_args.append((arg.get_datatype('C'), \"*%s\" % name))\n             else:\n                 type_args.append((arg.get_datatype('C'), name))\ndiff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 1cd56e12d1..78e2c4db36 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,25 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
    "model_name_or_path": "claude-3.7"
  },
  "sympy__sympy-16792__deepseek-chat": {
    "model_patch": "diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex f0befb2bd7..c363758133 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -910,7 +910,7 @@ def get_prototype(self, routine):\n         type_args = []\n         for arg in routine.arguments:\n             name = self.printer.doprint(arg.name)\n-            if arg.dimensions or isinstance(arg, ResultBase):\n+            if arg.dimensions or isinstance(arg, ResultBase) or isinstance(arg.name, MatrixSymbol):\n                 type_args.append((arg.get_datatype('C'), \"*%s\" % name))\n             else:\n                 type_args.append((arg.get_datatype('C'), name))\n",
    "model_name_or_path": "deepseek-chat"
  },
  "psf__requests-2674__claude-3.7": {
    "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 841cbbfe..b8077868 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -27,6 +27,9 @@ from .packages.urllib3.exceptions import ProtocolError\n from .packages.urllib3.exceptions import ReadTimeoutError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import ResponseError\n+from .packages.urllib3.exceptions import ClosedPoolError\n+from .packages.urllib3.exceptions import DecodeError\n+from .packages.urllib3.exceptions import TimeoutError\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n                          ProxyError, RetryError)\n@@ -409,7 +412,7 @@ class HTTPAdapter(BaseAdapter):\n                     low_conn.close()\n                     raise\n \n-        except (ProtocolError, socket.error) as err:\n+        except (ProtocolError, socket.error, ClosedPoolError, DecodeError, TimeoutError) as err:\n             raise ConnectionError(err, request=request)\n \n         except MaxRetryError as e:\n",
    "model_name_or_path": "claude-3.7"
  },
  "psf__requests-2674__deepseek-chat": {
    "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 841cbbfe..4286f7bc 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -27,6 +27,8 @@ from .packages.urllib3.exceptions import ProtocolError\n from .packages.urllib3.exceptions import ReadTimeoutError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import ResponseError\n+from .packages.urllib3.exceptions import DecodeError as _DecodeError\n+from .packages.urllib3.exceptions import TimeoutError as _TimeoutError\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n                          ProxyError, RetryError)\n@@ -431,5 +433,9 @@ class HTTPAdapter(BaseAdapter):\n                 raise ReadTimeout(e, request=request)\n             else:\n                 raise\n+        except _DecodeError as e:\n+            raise DecodeError(e, request=request)\n+        except _TimeoutError as e:\n+            raise Timeout(e, request=request)\n \n         return self.build_response(request, resp)\n",
    "model_name_or_path": "deepseek-chat"
  },
  "pallets__flask-5063__claude-3.7": {
    "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..76360e20 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,56 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n+    # Check if any rules have a subdomain or host\n+    has_subdomain = any(rule.subdomain is not None for rule in rules)\n+    has_host = current_app.url_map.host_matching\n+\n+    if has_subdomain:\n+        headers = (\"Subdomain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    elif has_host:\n+        headers = (\"Host\", \"Endpoint\", \"Methods\", \"Rule\")\n+    else:\n+        headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+\n+    if has_subdomain:\n+        widths = (\n+            max(len(rule.subdomain or \"\") for rule in rules),\n+            max(len(rule.endpoint) for rule in rules),\n+            max(len(methods) for methods in rule_methods),\n+            max(len(rule.rule) for rule in rules),\n+        )\n+    elif has_host:\n+        widths = (\n+            max(len(rule.host or \"\") for rule in rules),\n+            max(len(rule.endpoint) for rule in rules),\n+            max(len(methods) for methods in rule_methods),\n+            max(len(rule.rule) for rule in rules),\n+        )\n+    else:\n+        widths = (\n+            max(len(rule.endpoint) for rule in rules),\n+            max(len(methods) for methods in rule_methods),\n+            max(len(rule.rule) for rule in rules),\n+        )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    \n+    if has_subdomain:\n+        row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+    elif has_host:\n+        row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+    else:\n+        row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        if has_subdomain:\n+            click.echo(row.format(rule.subdomain or \"\", rule.endpoint, methods, rule.rule).rstrip())\n+        elif has_host:\n+            click.echo(row.format(rule.host or \"\", rule.endpoint, methods, rule.rule).rstrip())\n+        else:\n+            click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n",
    "model_name_or_path": "claude-3.7"
  },
  "pallets__flask-5063__deepseek-chat": {
    "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..9543e3b7 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,30 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Get server name for domain formatting\n+    server_name = current_app.config.get(\"SERVER_NAME\", \"localhost\")\n+    if \":\" in server_name:\n+        server_name = server_name.split(\":\", 1)[0]\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(server_name) + len(rule.subdomain or \"\") + 1 for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        if rule.subdomain:\n+            domain = f\"{rule.subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\ndiff --git a/tests/test_cli.py b/tests/test_cli.py\nindex 0d9625b1..a9183ec4 100644\n--- a/tests/test_cli.py\n+++ b/tests/test_cli.py\n@@ -472,6 +472,24 @@ class TestRoutes:\n         assert result.exit_code == 0\n         self.expect_order([\"aaa_post\", \"static\", \"yyy_get_post\"], result.output)\n \n+    def test_subdomain(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        app.add_url_rule(\"/a\", subdomain=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", subdomain=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Subdomain\" in result.output\n+\n+    def test_host(self, runner):\n+        app = Flask(__name__, static_folder=None, host_matching=True)\n+        app.add_url_rule(\"/a\", host=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", host=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Host\" in result.output\n+\n     def test_sort(self, app, invoke):\n         default_output = invoke([\"routes\"]).output\n         endpoint_output = invoke([\"routes\", \"-s\", \"endpoint\"]).output\n",
    "model_name_or_path": "deepseek-chat"
  },
  "django__django-14382__deepseek-chat": {
    "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..f248ab1b71 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n",
    "model_name_or_path": "deepseek-chat"
  },
  "django__django-14382__claude-3.7": {
    "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc60682868..f248ab1b71a 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n",
    "model_name_or_path": "claude-3.7"
  },
  "pydicom__pydicom-1256__deepseek-chat": {
    "model_patch": "diff --git a/pydicom/jsonrep.py b/pydicom/jsonrep.py\nindex c6ef519c3..697bba8b0 100644\n--- a/pydicom/jsonrep.py\n+++ b/pydicom/jsonrep.py\n@@ -224,9 +224,10 @@ class JsonDataElementConverter:\n                         VR=vr)\n                 else:\n                     value_key = unique_value_keys[0]\n-                    elem = DataElement.from_json(\n+                elem = DataElement.from_json(\n                         self.dataset_class, key, vr,\n-                        val[value_key], value_key\n+                        val[value_key], value_key,\n+                        self.bulk_data_element_handler\n                     )\n                 ds.add(elem)\n         return ds\n",
    "model_name_or_path": "deepseek-chat"
  }
}