{
  "sympy__sympy-16792": {
    "model_patch": "diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex f0befb2bd7..c363758133 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -910,7 +910,7 @@ def get_prototype(self, routine):\n         type_args = []\n         for arg in routine.arguments:\n             name = self.printer.doprint(arg.name)\n-            if arg.dimensions or isinstance(arg, ResultBase):\n+            if arg.dimensions or isinstance(arg, ResultBase) or isinstance(arg.name, MatrixSymbol):\n                 type_args.append((arg.get_datatype('C'), \"*%s\" % name))\n             else:\n                 type_args.append((arg.get_datatype('C'), name))\n",
    "model_name_or_path": "deepseek-chat"
  },
  "psf__requests-2674": {
    "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 841cbbfe..4286f7bc 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -27,6 +27,8 @@ from .packages.urllib3.exceptions import ProtocolError\n from .packages.urllib3.exceptions import ReadTimeoutError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import ResponseError\n+from .packages.urllib3.exceptions import DecodeError as _DecodeError\n+from .packages.urllib3.exceptions import TimeoutError as _TimeoutError\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n                          ProxyError, RetryError)\n@@ -431,5 +433,9 @@ class HTTPAdapter(BaseAdapter):\n                 raise ReadTimeout(e, request=request)\n             else:\n                 raise\n+        except _DecodeError as e:\n+            raise DecodeError(e, request=request)\n+        except _TimeoutError as e:\n+            raise Timeout(e, request=request)\n \n         return self.build_response(request, resp)\n",
    "model_name_or_path": "deepseek-chat"
  },
  "pallets__flask-5063": {
    "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..9543e3b7 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,30 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    # Get server name for domain formatting\n+    server_name = current_app.config.get(\"SERVER_NAME\", \"localhost\")\n+    if \":\" in server_name:\n+        server_name = server_name.split(\":\", 1)[0]\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(server_name) + len(rule.subdomain or \"\") + 1 for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        if rule.subdomain:\n+            domain = f\"{rule.subdomain}.{server_name}\"\n+        else:\n+            domain = server_name\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\ndiff --git a/tests/test_cli.py b/tests/test_cli.py\nindex 0d9625b1..a9183ec4 100644\n--- a/tests/test_cli.py\n+++ b/tests/test_cli.py\n@@ -472,6 +472,24 @@ class TestRoutes:\n         assert result.exit_code == 0\n         self.expect_order([\"aaa_post\", \"static\", \"yyy_get_post\"], result.output)\n \n+    def test_subdomain(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        app.add_url_rule(\"/a\", subdomain=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", subdomain=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Subdomain\" in result.output\n+\n+    def test_host(self, runner):\n+        app = Flask(__name__, static_folder=None, host_matching=True)\n+        app.add_url_rule(\"/a\", host=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", host=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Host\" in result.output\n+\n     def test_sort(self, app, invoke):\n         default_output = invoke([\"routes\"]).output\n         endpoint_output = invoke([\"routes\", \"-s\", \"endpoint\"]).output\n",
    "model_name_or_path": "deepseek-chat"
  },
  "django__django-14382": {
    "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..f248ab1b71 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n",
    "model_name_or_path": "deepseek-chat"
  },
  "pytest-dev__pytest-6116": {
    "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 843c5b5f7..78c580395 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -107,6 +107,7 @@ def pytest_addoption(parser):\n \n     group = parser.getgroup(\"collect\", \"collection\")\n     group.addoption(\n+        \"-C\",\n         \"--collectonly\",\n         \"--collect-only\",\n         action=\"store_true\",\n",
    "model_name_or_path": "deepseek-chat"
  },
  "django__django-15902": {
    "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 3adbc6979a..7b63308d3f 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -31,6 +31,7 @@ class ManagementForm(Form):\n     new forms via JavaScript, you should increment the count field of this form\n     as well.\n     \"\"\"\n+    template_name_div = \"django/forms/formsets/div.html\"\n \n     TOTAL_FORMS = IntegerField(widget=HiddenInput)\n     INITIAL_FORMS = IntegerField(widget=HiddenInput)\n",
    "model_name_or_path": "deepseek-chat"
  },
  "django__django-13925": {
    "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..9e69f1b480 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1297,6 +1297,10 @@ class Model(metaclass=ModelBase):\n \n     @classmethod\n     def _check_default_pk(cls):\n+        # Skip the warning if the model inherits a primary key\n+        if cls._meta.parents and any(parent._meta.pk for parent in cls._meta.parents.values()):\n+            return []\n+            \n         if (\n             cls._meta.pk.auto_created and\n             not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n",
    "model_name_or_path": "deepseek-chat"
  },
  "sympy__sympy-24102": {
    "model_patch": "diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py\nindex 7ea14ce33a..8e320abce6 100644\n--- a/sympy/parsing/mathematica.py\n+++ b/sympy/parsing/mathematica.py\n@@ -1067,6 +1067,9 @@ def recurse(expr):\n                     head = self._node_conversions.get(expr[0], Function(expr[0]))\n                 return head(*list(recurse(arg) for arg in expr[1:]))\n             else:\n+                # Handle Unicode characters (like Greek letters) properly\n+                if isinstance(expr, str) and not expr.isascii():\n+                    return symbols(expr)\n                 return self._atom_conversions.get(expr, sympify(expr))\n \n         return recurse(full_form_list)\n",
    "model_name_or_path": "deepseek-chat"
  },
  "pylint-dev__pylint-7114": {
    "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7cab78586..155c7dbc7 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -795,6 +795,16 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         self, importnode: ImportNode, modname: str | None\n     ) -> nodes.Module | None:\n         try:\n+            # Special handling for modules with same name as directory\n+            if modname and '.' in modname:\n+                parts = modname.split('.')\n+                if len(parts) >= 2 and parts[-1] == parts[-2]:\n+                    try:\n+                        return importnode.do_import_module(modname)\n+                    except astroid.AstroidBuildingError:\n+                        # Try without the last part (treat directory/__init__.py case)\n+                        return importnode.do_import_module('.'.join(parts[:-1]))\n+            \n             return importnode.do_import_module(modname)\n         except astroid.TooManyLevelsError:\n             if _ignore_import_failure(importnode, modname, self._ignored_modules):\n",
    "model_name_or_path": "deepseek-chat"
  },
  "pytest-dev__pytest-7220": {
    "model_patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 7b17d7612..3040aa7f7 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -789,14 +789,9 @@ class FormattedExcinfo:\n             return ReprEntry(lines, None, None, None, style)\n \n     def _makepath(self, path):\n-        if not self.abspath:\n-            try:\n-                np = py.path.local().bestrelpath(path)\n-            except OSError:\n-                return path\n-            if len(np) < len(str(path)):\n-                path = np\n-        return path\n+        if isinstance(path, str):\n+            return path\n+        return str(path)\n \n     def repr_traceback(self, excinfo: ExceptionInfo) -> \"ReprTraceback\":\n         traceback = excinfo.traceback\n",
    "model_name_or_path": "deepseek-chat"
  },
  "django__django-14915": {
    "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923c12..bc7e6959e7 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n",
    "model_name_or_path": "deepseek-chat"
  },
  "django__django-14787": {
    "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..b79970671b 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -38,6 +38,9 @@ def _multi_decorate(decorators, method):\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n         bound_method = partial(method.__get__(self, type(self)))\n+        # Copy attributes from the original method to the partial object\n+        # so that decorators can access them (e.g., __name__, __module__)\n+        update_wrapper(bound_method, method)\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\ndiff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 46b01c1852..e496e2c790 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,6 +425,29 @@ class MethodDecoratorTests(SimpleTestCase):\n                 def __module__(cls):\n                     return \"tests\"\n \n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n \n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n",
    "model_name_or_path": "deepseek-chat"
  }
}